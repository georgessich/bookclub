import type { Trace } from '@apollo/usage-reporting-protobuf';
import type { DocumentNode, FormattedExecutionResult, GraphQLError, GraphQLSchema, OperationDefinitionNode } from 'graphql';
import type { CachePolicy } from '@apollo/cache-control-types';
import type { BaseContext } from './context';
import type { HTTPGraphQLHead, HTTPGraphQLRequest } from './http';
import type { Logger } from '@apollo/utils.logger';
import type { KeyValueCache } from '@apollo/utils.keyvaluecache';
export interface GraphQLRequest {
    query?: string;
    operationName?: string;
    variables?: VariableValues;
    extensions?: Record<string, any>;
    http?: HTTPGraphQLRequest;
}
export declare type VariableValues = {
    [name: string]: any;
};
export interface GraphQLResponse {
    result: FormattedExecutionResult;
    http: HTTPGraphQLHead;
}
export interface GraphQLRequestMetrics {
    captureTraces?: boolean;
    persistedQueryHit?: boolean;
    persistedQueryRegister?: boolean;
    responseCacheHit?: boolean;
    forbiddenOperation?: boolean;
    registeredOperation?: boolean;
    startHrTime?: [number, number];
    queryPlanTrace?: Trace.QueryPlanNode;
}
export interface GraphQLRequestContext<TContext extends BaseContext> {
    readonly logger: Logger;
    readonly cache: KeyValueCache<string>;
    readonly request: GraphQLRequest;
    readonly response: GraphQLResponse;
    readonly schema: GraphQLSchema;
    readonly contextValue: TContext;
    readonly queryHash?: string;
    readonly document?: DocumentNode;
    readonly source?: string;
    readonly operationName?: string | null;
    readonly operation?: OperationDefinitionNode;
    readonly errors?: ReadonlyArray<GraphQLError>;
    readonly metrics: GraphQLRequestMetrics;
    readonly overallCachePolicy: CachePolicy;
}
//# sourceMappingURL=graphql.d.ts.map