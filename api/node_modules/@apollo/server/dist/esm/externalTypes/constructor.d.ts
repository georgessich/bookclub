import type { Logger } from '@apollo/utils.logger';
import type { IExecutableSchemaDefinition } from '@graphql-tools/schema';
import type { DocumentNode, GraphQLFieldResolver, GraphQLFormattedError, GraphQLSchema, ParseOptions, ValidationContext } from 'graphql';
import type { KeyValueCache } from '@apollo/utils.keyvaluecache';
import type { GatewayInterface } from '@apollo/server-gateway-interface';
import type { BaseContext } from '.';
import type { ApolloServerPlugin } from './plugins';
export declare type DocumentStore = KeyValueCache<DocumentNode>;
export interface ApolloConfigInput {
    key?: string;
    graphRef?: string;
    graphId?: string;
    graphVariant?: string;
}
export interface ApolloConfig {
    key?: string;
    keyHash?: string;
    graphRef?: string;
}
export interface PersistedQueryOptions {
    cache?: KeyValueCache<string>;
    ttl?: number | null;
}
export interface CSRFPreventionOptions {
    requestHeaders?: string[];
}
interface ApolloServerOptionsBase<TContext extends BaseContext> {
    formatError?: (formattedError: GraphQLFormattedError, error: unknown) => GraphQLFormattedError;
    rootValue?: ((parsedQuery: DocumentNode) => any) | any;
    validationRules?: Array<(context: ValidationContext) => any>;
    fieldResolver?: GraphQLFieldResolver<any, TContext>;
    cache?: KeyValueCache<string>;
    includeStacktraceInErrorResponses?: boolean;
    logger?: Logger;
    allowBatchedHttpRequests?: boolean;
    introspection?: boolean;
    plugins?: ApolloServerPlugin<TContext>[];
    persistedQueries?: PersistedQueryOptions | false;
    stopOnTerminationSignals?: boolean;
    apollo?: ApolloConfigInput;
    nodeEnv?: string;
    documentStore?: DocumentStore | null;
    csrfPrevention?: CSRFPreventionOptions | boolean;
    parseOptions?: ParseOptions;
}
interface ApolloServerOptionsWithGateway<TContext extends BaseContext> extends ApolloServerOptionsBase<TContext> {
    gateway: GatewayInterface;
    schema?: undefined;
    typeDefs?: undefined;
    resolvers?: undefined;
}
interface ApolloServerOptionsWithSchema<TContext extends BaseContext> extends ApolloServerOptionsBase<TContext> {
    schema: GraphQLSchema;
    gateway?: undefined;
    typeDefs?: undefined;
    resolvers?: undefined;
}
interface ApolloServerOptionsWithTypeDefs<TContext extends BaseContext> extends ApolloServerOptionsBase<TContext> {
    typeDefs: IExecutableSchemaDefinition<TContext>['typeDefs'];
    resolvers?: IExecutableSchemaDefinition<TContext>['resolvers'];
    gateway?: undefined;
    schema?: undefined;
}
export declare type ApolloServerOptionsWithStaticSchema<TContext extends BaseContext> = ApolloServerOptionsWithSchema<TContext> | ApolloServerOptionsWithTypeDefs<TContext>;
export declare type ApolloServerOptions<TContext extends BaseContext> = ApolloServerOptionsWithGateway<TContext> | ApolloServerOptionsWithStaticSchema<TContext>;
export {};
//# sourceMappingURL=constructor.d.ts.map