"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runPotentiallyBatchedHttpQuery = exports.runBatchHttpQuery = void 0;
const runHttpQuery_js_1 = require("./runHttpQuery.js");
const internalErrorClasses_js_1 = require("./internalErrorClasses.js");
async function runBatchHttpQuery(server, batchRequest, body, contextValue, schemaDerivedData, internals) {
    const combinedResponse = {
        headers: new runHttpQuery_js_1.HeaderMap(),
        bodyChunks: null,
        completeBody: '',
    };
    const responseBodies = await Promise.all(body.map(async (bodyPiece) => {
        const singleRequest = {
            ...batchRequest,
            body: bodyPiece,
        };
        const response = await (0, runHttpQuery_js_1.runHttpQuery)(server, singleRequest, contextValue, schemaDerivedData, internals);
        if (response.completeBody === null) {
            throw Error('Incremental delivery not implemented');
        }
        for (const [key, value] of response.headers) {
            combinedResponse.headers.set(key, value);
        }
        if (response.status) {
            combinedResponse.status = response.status;
        }
        return response.completeBody;
    }));
    combinedResponse.completeBody = `[${responseBodies.join(',')}]`;
    return combinedResponse;
}
exports.runBatchHttpQuery = runBatchHttpQuery;
async function runPotentiallyBatchedHttpQuery(server, httpGraphQLRequest, contextValue, schemaDerivedData, internals) {
    if (!Array.isArray(httpGraphQLRequest.body)) {
        return await (0, runHttpQuery_js_1.runHttpQuery)(server, httpGraphQLRequest, contextValue, schemaDerivedData, internals);
    }
    if (internals.allowBatchedHttpRequests) {
        return await runBatchHttpQuery(server, httpGraphQLRequest, httpGraphQLRequest.body, contextValue, schemaDerivedData, internals);
    }
    throw new internalErrorClasses_js_1.BadRequestError('Operation batching disabled.');
}
exports.runPotentiallyBatchedHttpQuery = runPotentiallyBatchedHttpQuery;
//# sourceMappingURL=httpBatching.js.map